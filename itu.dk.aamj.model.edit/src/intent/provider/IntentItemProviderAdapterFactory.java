/**
 */
package intent.provider;

import intent.util.IntentAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IntentItemProviderAdapterFactory extends IntentAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IntentItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.Intent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntentItemProvider intentItemProvider;

	/**
	 * This creates an adapter for a {@link intent.Intent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIntentAdapter() {
		if (intentItemProvider == null) {
			intentItemProvider = new IntentItemProvider(this);
		}

		return intentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.Bundle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BundleItemProvider bundleItemProvider;

	/**
	 * This creates an adapter for a {@link intent.Bundle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBundleAdapter() {
		if (bundleItemProvider == null) {
			bundleItemProvider = new BundleItemProvider(this);
		}

		return bundleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.ExplicitIntent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExplicitIntentItemProvider explicitIntentItemProvider;

	/**
	 * This creates an adapter for a {@link intent.ExplicitIntent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createExplicitIntentAdapter() {
		if (explicitIntentItemProvider == null) {
			explicitIntentItemProvider = new ExplicitIntentItemProvider(this);
		}

		return explicitIntentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.ImplicitIntent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicitIntentItemProvider implicitIntentItemProvider;

	/**
	 * This creates an adapter for a {@link intent.ImplicitIntent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createImplicitIntentAdapter() {
		if (implicitIntentItemProvider == null) {
			implicitIntentItemProvider = new ImplicitIntentItemProvider(this);
		}

		return implicitIntentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.DoubleExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleExtraItemProvider doubleExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.DoubleExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDoubleExtraAdapter() {
		if (doubleExtraItemProvider == null) {
			doubleExtraItemProvider = new DoubleExtraItemProvider(this);
		}

		return doubleExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.IntExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntExtraItemProvider intExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.IntExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIntExtraAdapter() {
		if (intExtraItemProvider == null) {
			intExtraItemProvider = new IntExtraItemProvider(this);
		}

		return intExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.IntentFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntentFilterItemProvider intentFilterItemProvider;

	/**
	 * This creates an adapter for a {@link intent.IntentFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIntentFilterAdapter() {
		if (intentFilterItemProvider == null) {
			intentFilterItemProvider = new IntentFilterItemProvider(this);
		}

		return intentFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.Data} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataItemProvider dataItemProvider;

	/**
	 * This creates an adapter for a {@link intent.Data}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDataAdapter() {
		if (dataItemProvider == null) {
			dataItemProvider = new DataItemProvider(this);
		}

		return dataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.CharSequenceExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharSequenceExtraItemProvider charSequenceExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.CharSequenceExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCharSequenceExtraAdapter() {
		if (charSequenceExtraItemProvider == null) {
			charSequenceExtraItemProvider = new CharSequenceExtraItemProvider(this);
		}

		return charSequenceExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.CharExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharExtraItemProvider charExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.CharExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCharExtraAdapter() {
		if (charExtraItemProvider == null) {
			charExtraItemProvider = new CharExtraItemProvider(this);
		}

		return charExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.BundleExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BundleExtraItemProvider bundleExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.BundleExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBundleExtraAdapter() {
		if (bundleExtraItemProvider == null) {
			bundleExtraItemProvider = new BundleExtraItemProvider(this);
		}

		return bundleExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.ParceableExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParceableExtraItemProvider parceableExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.ParceableExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createParceableExtraAdapter() {
		if (parceableExtraItemProvider == null) {
			parceableExtraItemProvider = new ParceableExtraItemProvider(this);
		}

		return parceableExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.SerializableExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SerializableExtraItemProvider serializableExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.SerializableExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSerializableExtraAdapter() {
		if (serializableExtraItemProvider == null) {
			serializableExtraItemProvider = new SerializableExtraItemProvider(this);
		}

		return serializableExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.FloatExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatExtraItemProvider floatExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.FloatExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFloatExtraAdapter() {
		if (floatExtraItemProvider == null) {
			floatExtraItemProvider = new FloatExtraItemProvider(this);
		}

		return floatExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.ByteExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ByteExtraItemProvider byteExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.ByteExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createByteExtraAdapter() {
		if (byteExtraItemProvider == null) {
			byteExtraItemProvider = new ByteExtraItemProvider(this);
		}

		return byteExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.LongExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongExtraItemProvider longExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.LongExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLongExtraAdapter() {
		if (longExtraItemProvider == null) {
			longExtraItemProvider = new LongExtraItemProvider(this);
		}

		return longExtraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link intent.StringExtra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringExtraItemProvider stringExtraItemProvider;

	/**
	 * This creates an adapter for a {@link intent.StringExtra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createStringExtraAdapter() {
		if (stringExtraItemProvider == null) {
			stringExtraItemProvider = new StringExtraItemProvider(this);
		}

		return stringExtraItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (intentItemProvider != null) intentItemProvider.dispose();
		if (bundleItemProvider != null) bundleItemProvider.dispose();
		if (explicitIntentItemProvider != null) explicitIntentItemProvider.dispose();
		if (implicitIntentItemProvider != null) implicitIntentItemProvider.dispose();
		if (doubleExtraItemProvider != null) doubleExtraItemProvider.dispose();
		if (intExtraItemProvider != null) intExtraItemProvider.dispose();
		if (intentFilterItemProvider != null) intentFilterItemProvider.dispose();
		if (dataItemProvider != null) dataItemProvider.dispose();
		if (charSequenceExtraItemProvider != null) charSequenceExtraItemProvider.dispose();
		if (charExtraItemProvider != null) charExtraItemProvider.dispose();
		if (bundleExtraItemProvider != null) bundleExtraItemProvider.dispose();
		if (parceableExtraItemProvider != null) parceableExtraItemProvider.dispose();
		if (serializableExtraItemProvider != null) serializableExtraItemProvider.dispose();
		if (floatExtraItemProvider != null) floatExtraItemProvider.dispose();
		if (byteExtraItemProvider != null) byteExtraItemProvider.dispose();
		if (longExtraItemProvider != null) longExtraItemProvider.dispose();
		if (stringExtraItemProvider != null) stringExtraItemProvider.dispose();
	}

}
