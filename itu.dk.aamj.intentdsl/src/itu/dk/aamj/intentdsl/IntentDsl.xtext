// automatically generated by Xtext
grammar itu.dk.aamj.intentdsl.IntentDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/itu.dk.aamj.model/model/intent.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model' name=EString '{'
		('intents' '{' intents+=Intent ( "," intents+=Intent)* '}' )?
	'}';

Intent returns Intent:
	{Intent}
	name=EString '{'
		'action' action=EString
		('category' category=EString)?
		('type' type=EString)?
		('data' data=EString)?
		('exceptionName' exceptionName=EString)?
		('extras' '{' extras+=Extra ( "," extras+=Extra)* '}' )?
		('sucessCallback' sucessCallback=Callback)?
		('permissions' '{' permissions+=Permissions ( "," permissions+=Permissions)* '}' )?
	'}';

Extra returns Extra:
	{Extra}
	type=ExtraType name=EString value=EString;

enum ExtraType:
	String = 'String' | Serializable = 'Serializable' | Float = 'float' | Byte = 'byte' | Long = 'long' |
	Parcelable = 'Parcelable' | Bundle = 'Bundle' | Char = 'char' | CharSequence = 'CharSequence' | Int = 'int' | Double = 'double' | Uri = 'Uri' | Boolean = 'boolean';

EString returns ecore::EString:
	STRING | ID;
	
//Before: Callback functioname { data anotherstring }
//After: Callback functioname(anotherstring);
Callback returns Callback:
	{Callback}
	'Callback' name=EString ('(' 'data' data=EString ')')? ';';

Permissions returns Permissions:
	{Permissions}
	'Permissions'
	name=EString;