// automatically generated by Xtext
grammar itu.dk.aamj.intentdsl.IntentDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/itu.dk.aamj.model/model/intent.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model' name=EString '{'
		('intents' '{' intents+=Intent ( "," intents+=Intent)* '}' )?
	'}';

Intent returns Intent:
	ExplicitIntent | ImplicitIntent;

Bundle returns Bundle:
	DoubleExtra | IntExtra | CharSequenceExtra | CharExtra | BundleExtra | ParceableExtra | SerializableExtra | FloatExtra | ByteExtra | LongExtra | StringExtra | BooleanExtra | UriExtra;

EString returns ecore::EString:
	STRING | ID;
	
//Before: Callback functioname { data anotherstring }
//After: Callback functioname(anotherstring);
Callback returns Callback:
	{Callback}
	'Callback' name=EString ('(' 'data' data=EString ')')? ';';

Permissions returns Permissions:
	{Permissions}
	'Permissions'
	name=EString;

ExplicitIntent returns ExplicitIntent:
	'ExplicitIntent'
	name=EString
	'{'
		('type' type=EString)?
		('data' data=EString)?
		('exceptionName' exceptionName=EString)?
		'component' component=EString
		('extras' '{' extras+=Bundle ( "," extras+=Bundle)* '}' )?
		('sucessCallback' sucessCallback=Callback)?
		('permissions' '{' permissions+=Permissions ( "," permissions+=Permissions)* '}' )?
	'}';

ImplicitIntent returns ImplicitIntent:
	'ImplicitIntent'
	name=EString
	'{'
		('type' type=EString)?
		('data' data=EString)?
		('exceptionName' exceptionName=EString)?
		('category' category=EString)?
		'action' action=EString
		('extras' '{' extras+=Bundle ( "," extras+=Bundle)* '}' )?
		('sucessCallback' sucessCallback=Callback)?
		('permissions' '{' permissions+=Permissions ( "," permissions+=Permissions)* '}' )?
	'}';

//Before DoubleExtra name { value somevalue }
//After: DoubleExtra name somevalue;
DoubleExtra returns DoubleExtra:
	'DoubleExtra' name=EString value=EString;

IntExtra returns IntExtra:
	'IntExtra' name=EString value=EString;

CharSequenceExtra returns CharSequenceExtra:
	'CharSequenceExtra' name=EString value=EString;

CharExtra returns CharExtra:
	'CharExtra' name=EString value=EString;

BundleExtra returns BundleExtra:
	'BundleExtra' name=EString value=EString;

ParceableExtra returns ParceableExtra:
	'ParceableExtra' name=EString value=EString;

SerializableExtra returns SerializableExtra:
	'SerializableExtra' name=EString value=EString;

FloatExtra returns FloatExtra:
	'FloatExtra' name=EString value=EString;

ByteExtra returns ByteExtra:
	'ByteExtra' name=EString value=EString;

LongExtra returns LongExtra:
	'LongExtra' name=EString value=EString;

StringExtra returns StringExtra:
	'StringExtra' name=EString value=EString;

BooleanExtra returns BooleanExtra:
	'BooleanExtra' name=EString value=EString;
	
UriExtra returns UriExtra:
	'UriExtra' name=EString value=EString;